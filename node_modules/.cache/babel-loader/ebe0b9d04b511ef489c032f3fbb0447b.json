{"ast":null,"code":"var _jsxFileName = \"/Users/vanessamitelman/NODEJS PROJECT/React API Projects/goggle/src/contexts/ResultContextProvider.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { createContext, useContext, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ResultContext = /*#__PURE__*/createContext();\nconst baseUrl = 'https://google-search3.p.rapidapi.com/api/v1';\nexport const ResultContextProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [results, setResults] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [searchTerm, setSearchTerm] = useState('JS Mastery'); // '/image' '/videos' etc...\n\n  const getResults = async type => {\n    setIsLoading(true);\n    const response = await fetch(`${baseUrl}${type}`, {\n      method: 'GET',\n      headers: {\n        'X-User-Agent': 'desktop',\n        'X-Proxy-Location': 'EU',\n        'X-RapidAPI-Host': 'google-search3.p.rapidapi.com',\n        'X-RapidAPI-Key': '004b8b5689msha5cbff8f022b1f3p1330e1jsn92e844297c2b'\n      }\n    });\n    const data = await response.json();\n\n    if (type.includes === '/news') {\n      setResults(data.entries);\n    } else if (type.includes === '/image') {\n      console.log(image);\n      setResults(data.image_results);\n    } else {\n      setResults(data.results);\n    }\n\n    setIsLoading(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(ResultContext.Provider, {\n    value: {\n      getResults,\n      results,\n      isLoading,\n      searchTerm,\n      setSearchTerm\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ResultContextProvider, \"G4Lt7BX6FqihbgtKXn4Ml7nPjp4=\");\n\n_c = ResultContextProvider;\nexport const useResultContext = () => {\n  _s2();\n\n  return useContext(ResultContext);\n};\n\n_s2(useResultContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"ResultContextProvider\");","map":{"version":3,"sources":["/Users/vanessamitelman/NODEJS PROJECT/React API Projects/goggle/src/contexts/ResultContextProvider.js"],"names":["React","createContext","useContext","useState","ResultContext","baseUrl","ResultContextProvider","children","results","setResults","isLoading","setIsLoading","searchTerm","setSearchTerm","getResults","type","response","fetch","method","headers","data","json","includes","entries","console","log","image","image_results","useResultContext"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,EAA2CC,QAA3C,QAA2D,OAA3D;;AAEA,MAAMC,aAAa,gBAAGH,aAAa,EAAnC;AACA,MAAMI,OAAO,GAAG,8CAAhB;AAEA,OAAO,MAAMC,qBAAqB,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AACrD,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACO,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACS,UAAD,EAAaC,aAAb,IAA8BV,QAAQ,CAAC,YAAD,CAA5C,CAHqD,CAIrD;;AACA,QAAMW,UAAU,GAAG,MAAOC,IAAP,IAAgB;AACjCJ,IAAAA,YAAY,CAAC,IAAD,CAAZ;AAEA,UAAMK,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEZ,OAAQ,GAAEU,IAAK,EAAnB,EAAsB;AAChDG,MAAAA,MAAM,EAAE,KADwC;AAEhDC,MAAAA,OAAO,EAAE;AACP,wBAAgB,SADT;AAEP,4BAAoB,IAFb;AAGP,2BAAmB,+BAHZ;AAIP,0BAAkB;AAJX;AAFuC,KAAtB,CAA5B;AASA,UAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;;AACA,QAAIN,IAAI,CAACO,QAAL,KAAkB,OAAtB,EAA+B;AAC7Bb,MAAAA,UAAU,CAACW,IAAI,CAACG,OAAN,CAAV;AACD,KAFD,MAEO,IAAIR,IAAI,CAACO,QAAL,KAAkB,QAAtB,EAAgC;AACrCE,MAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;AACAjB,MAAAA,UAAU,CAACW,IAAI,CAACO,aAAN,CAAV;AACD,KAHM,MAGA;AACLlB,MAAAA,UAAU,CAACW,IAAI,CAACZ,OAAN,CAAV;AACD;;AAEDG,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GAvBD;;AAwBA,sBACE,QAAC,aAAD,CAAe,QAAf;AACE,IAAA,KAAK,EAAE;AACLG,MAAAA,UADK;AAELN,MAAAA,OAFK;AAGLE,MAAAA,SAHK;AAILE,MAAAA,UAJK;AAKLC,MAAAA;AALK,KADT;AAAA,cASGN;AATH;AAAA;AAAA;AAAA;AAAA,UADF;AAaD,CA1CM;;GAAMD,qB;;KAAAA,qB;AA4Cb,OAAO,MAAMsB,gBAAgB,GAAG;AAAA;;AAAA,SAAM1B,UAAU,CAACE,aAAD,CAAhB;AAAA,CAAzB;;IAAMwB,gB","sourcesContent":["import React, { createContext, useContext, useState } from 'react';\n\nconst ResultContext = createContext();\nconst baseUrl = 'https://google-search3.p.rapidapi.com/api/v1';\n\nexport const ResultContextProvider = ({ children }) => {\n  const [results, setResults] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [searchTerm, setSearchTerm] = useState('JS Mastery');\n  // '/image' '/videos' etc...\n  const getResults = async (type) => {\n    setIsLoading(true);\n\n    const response = await fetch(`${baseUrl}${type}`, {\n      method: 'GET',\n      headers: {\n        'X-User-Agent': 'desktop',\n        'X-Proxy-Location': 'EU',\n        'X-RapidAPI-Host': 'google-search3.p.rapidapi.com',\n        'X-RapidAPI-Key': '004b8b5689msha5cbff8f022b1f3p1330e1jsn92e844297c2b'\n      }\n    });\n    const data = await response.json();\n    if (type.includes === '/news') {\n      setResults(data.entries);\n    } else if (type.includes === '/image') {\n      console.log(image)\n      setResults(data.image_results);\n    } else {\n      setResults(data.results);\n    }\n\n    setIsLoading(false);\n  };\n  return (\n    <ResultContext.Provider\n      value={{\n        getResults,\n        results,\n        isLoading,\n        searchTerm,\n        setSearchTerm\n      }}\n    >\n      {children}\n    </ResultContext.Provider>\n  );\n};\n\nexport const useResultContext = () => useContext(ResultContext);\n"]},"metadata":{},"sourceType":"module"}